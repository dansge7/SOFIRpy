image: python:3.9.14-bullseye

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip

stages:
  - Static Analysis
  - Test
  - Documentation
  - Release

.venv_setup:
  before_script:
    - python --version
    - pip install --upgrade pip setuptools
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -e ".[test, doc, dev]"

linting:
  extends: .venv_setup
  stage: Static Analysis
  script:
    - ruff check src

type_checking:
  extends: .venv_setup
  stage: Static Analysis
  script:
    - mypy src/sofirpy

test:
  extends: .venv_setup
  stage: Test
  image: python:${PY_VERSION}
  parallel:
    matrix:
      - PY_VERSION: ["3.9", "3.10", "3.11", "3.12"]
  script:
    - pytest --cov=src/ --junitxml=report.xml --snapshot-warn-unused
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: report.xml
    when: always

doc:
  extends: .venv_setup
  stage: Documentation
  script:
    - cd docs/
    - make html

publish:
  extends: .venv_setup
  stage: Release
  needs:
    - type_checking
    - test
    - doc
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - tag_version=`echo "$CI_COMMIT_TAG"|cut -d "v" -f2`
    - ver=`pip show sofirpy|grep Version|cut -d " " -f2`
    - |
      if [ "$tag_version" != "$ver" ]
      then
        echo "GitLab TAG "$tag_version" does not match specified version "$ver" in sofirpy/__init__.py"
        exit 1
      fi
    - pip install build twine
    - python -m build
    - TWINE_PASSWORD=${TWINE_PASSWORD} TWINE_USERNAME=${TWINE_USERNAME} twine upload dist/*

release:
  stage: Release
  needs:
    - publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "release job" # placeholder because script keyword must be included
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: './docs/change_log/$CI_COMMIT_TAG.rst'
